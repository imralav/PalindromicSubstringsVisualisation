/*! For license information please see bundle.d81265f66afc52809fb0.js.LICENSE.txt */
(()=>{"use strict";var n={735:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(15),i=t.n(r),o=t(645),s=t.n(o)()(i());s.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]);const c=s},169:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(15),i=t.n(r),o=t(645),s=t.n(o),c=t(735),a=s()(i());a.i(c.Z),a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;500&display=swap);"]),a.push([n.id,'@use "sass:color";body{background-color:#264653;color:#f4a261;font-size:25px;font-family:Roboto;font-weight:300}.container{width:70vw;margin:50px auto}.palindrome-search-input{display:flex;flex-direction:column;align-items:center}.palindrome-search-input-element{margin:20px 0}.palindrome-search-input__label{display:block}.palindrome-search-input #palindrome-search-input{display:block;border:0;border:1px solid #264653;border-bottom-color:#2a9d8f;border-radius:10px;color:#f4a261;font-size:25px;font-weight:500;background-color:#264653;text-align:center;width:80%;transition:border-color 1s ease-in-out;padding:10px 10px 0px 10px}.palindrome-search-input #palindrome-search-input:focus{outline:none;border:1px solid rgba(42,157,143,0.4);border-bottom-color:#2a9d8f}.palindrome-search-input__start-button{display:block;background-color:#2a9d8f;border:0;border-radius:10px;color:#264653;padding:10px;font-size:25px}.palindrome-search-input__start-button:hover{box-shadow:0 0 3px #2a9d8f}.palindrome-search-input__start-button:focus{outline:none;box-shadow:0 0 5px #2a9d8f}.palindrome-search-output-characters{padding:0;max-width:70vw;display:flex;flex-wrap:wrap;align-items:center;justify-content:center;align-content:center;list-style:none}.palindrome-search-output-character{text-align:center;display:inline-block;box-sizing:border-box;padding:5px;min-width:30px;min-height:30px;margin:1px;background-color:#2a9d8f;color:#264653;font-size:15px}.palindrome-search-output-character.found{background:#6fe751}.palindrome-search-output-character.inspected{background:#e9c46a}.palindrome-search-output-found-palindromes{border-bottom:1px solid #2a9d8f}.palindrome-search-output-found-palindromes-container{list-style:square}.palindrome-search-output-palindrome{display:inline-block;margin:5px 5px;font-size:15px}\n',"",{version:3,sources:["webpack://./src/main.scss"],names:[],mappings:"AAAA,iBAAI,CAaJ,KACE,wBATkB,CAUlB,aAPiB,CAQjB,cALmB,CAMnB,kBAAmB,CACnB,eAAgB,CACjB,WAGC,UAAW,CACX,gBAAiB,CAClB,yBAGC,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAEnB,iCACE,aAAc,CACf,gCAGC,aAAc,CAVlB,kDAcI,aAAc,CACd,QAAS,CACT,wBArCgB,CAsChB,2BArCkB,CAsClB,kBAAmB,CACnB,aArCe,CAsCf,cAnCiB,CAoCjB,eAAgB,CAChB,wBA3CgB,CA4ChB,iBAAkB,CAClB,SAAU,CACV,sCAAuC,CACvC,0BAA2B,CA1B/B,wDA6BM,YAAa,CACb,qCAA2D,CAC3D,2BAnDgB,CAoDjB,uCAID,aAAc,CACd,wBAzDkB,CA0DlB,QAAS,CACT,kBAAmB,CACnB,aA7DgB,CA8DhB,YAAa,CACb,cAzDiB,CAkDlB,6CASG,0BAhEgB,CAuDnB,6CAaG,YAAa,CACb,0BArEgB,CAsEjB,qCAMD,SAAU,CACV,cAAe,CACf,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,sBAAuB,CACvB,oBAAqB,CACrB,eAAgB,CACjB,oCAGC,iBAAkB,CAClB,oBAAqB,CACrB,qBAAsB,CACtB,WAAY,CACZ,cAAe,CACf,eAAgB,CAChB,UAAW,CACX,wBA9FkB,CA+FlB,aAhGgB,CAiGhB,cAAe,CAVhB,0CAaG,kBA/FW,CAkFd,8CAiBG,kBAtGW,CAuGZ,4CAID,+BA5GkB,CA8GlB,sDACE,iBAAkB,CACnB,qCAID,oBAAqB,CACrB,cAAe,CACf,cAAe",sourcesContent:['@use "sass:color";\r\n\r\n@import url("normalize.css");\r\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;500&display=swap");\r\n\r\n$bg-primary: #264653;\r\n$bg-highlight: #2a9d8f;\r\n$primary: #e9c46a;\r\n$secondary: #f4a261;\r\n$highlight: #e76f51;\r\n$success: #6fe751;\r\n$main-font-size: 25px;\r\n\r\nbody {\r\n  background-color: $bg-primary;\r\n  color: $secondary;\r\n  font-size: $main-font-size;\r\n  font-family: Roboto;\r\n  font-weight: 300;\r\n}\r\n\r\n.container {\r\n  width: 70vw;\r\n  margin: 50px auto;\r\n}\r\n\r\n.palindrome-search-input {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  &-element {\r\n    margin: 20px 0;\r\n  }\r\n\r\n  &__label {\r\n    display: block;\r\n  }\r\n\r\n  #palindrome-search-input {\r\n    display: block;\r\n    border: 0;\r\n    border: 1px solid $bg-primary;\r\n    border-bottom-color: $bg-highlight;\r\n    border-radius: 10px;\r\n    color: $secondary;\r\n    font-size: $main-font-size;\r\n    font-weight: 500;\r\n    background-color: $bg-primary;\r\n    text-align: center;\r\n    width: 80%;\r\n    transition: border-color 1s ease-in-out;\r\n    padding: 10px 10px 0px 10px;\r\n\r\n    &:focus {\r\n      outline: none;\r\n      border: 1px solid adjust-color($bg-highlight, $alpha: -0.6);\r\n      border-bottom-color: $bg-highlight;\r\n    }\r\n  }\r\n\r\n  &__start-button {\r\n    display: block;\r\n    background-color: $bg-highlight;\r\n    border: 0;\r\n    border-radius: 10px;\r\n    color: $bg-primary;\r\n    padding: 10px;\r\n    font-size: $main-font-size;\r\n    &:hover {\r\n      box-shadow: 0 0 3px $bg-highlight;\r\n    }\r\n\r\n    &:focus {\r\n      outline: none;\r\n      box-shadow: 0 0 5px $bg-highlight;\r\n    }\r\n  }\r\n}\r\n\r\n.palindrome-search-output {\r\n  &-characters {\r\n    padding: 0;\r\n    max-width: 70vw;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    align-content: center;\r\n    list-style: none;\r\n  }\r\n\r\n  &-character {\r\n    text-align: center;\r\n    display: inline-block;\r\n    box-sizing: border-box;\r\n    padding: 5px;\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    margin: 1px;\r\n    background-color: $bg-highlight;\r\n    color: $bg-primary;\r\n    font-size: 15px;\r\n\r\n    &.found {\r\n      background: $success;\r\n    }\r\n\r\n    &.inspected {\r\n      background: $primary;\r\n    }\r\n  }\r\n\r\n  &-found-palindromes {\r\n    border-bottom: 1px solid $bg-highlight;\r\n\r\n    &-container {\r\n      list-style: square;\r\n    }\r\n  }\r\n\r\n  &-palindrome {\r\n    display: inline-block;\r\n    margin: 5px 5px;\r\n    font-size: 15px;\r\n  }\r\n}\r\n'],sourceRoot:""}]);const u=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var a=[].concat(n[c]);r&&i[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,i=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,i=!1,o=void 0;try{for(var s,c=n[Symbol.iterator]();!(r=(s=c.next()).done)&&(t.push(s.value),!e||t.length!==e);r=!0);}catch(n){i=!0,o=n}finally{try{r||null==c.return||c.return()}finally{if(i)throw o}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),u="/*# ".concat(a," */"),l=s.sources.map((function(n){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:(n,e,t)=>{var r,i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),o=[];function s(n){for(var e=-1,t=0;t<o.length;t++)if(o[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],i=0;i<n.length;i++){var c=n[i],a=e.base?c[0]+e.base:c[0],u=t[a]||0,l="".concat(a," ").concat(u);t[a]=u+1;var h=s(l),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==h?(o[h].references++,o[h].updater(d)):o.push({identifier:l,updater:A(d,e),references:1}),r.push(l)}return r}function a(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var s=i(n.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var u,l=(u=[],function(n,e){return u[n]=e,u.filter(Boolean).join("\n")});function h(n,e,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(o,s[e]):n.appendChild(o)}}function d(n,e,t){var r=t.css,i=t.media,o=t.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,f=0;function A(n,e){var t,r,i;if(e.singleton){var o=f++;t=p||(p=a(e)),r=h.bind(null,t,o,!1),i=h.bind(null,t,o,!0)}else t=a(e),r=d.bind(null,t,e),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else i()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var i=s(t[r]);o[i].references--}for(var a=c(n,e),u=0;u<t.length;u++){var l=s(t[u]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}t=a}}}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t])})(e,t)};function e(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function r(n){return"function"==typeof n}var i=!1,o={Promise:void 0,set useDeprecatedSynchronousErrorHandling(n){n&&(new Error).stack,i=n},get useDeprecatedSynchronousErrorHandling(){return i}};function s(n){setTimeout((function(){throw n}),0)}var c={closed:!0,next:function(n){},error:function(n){if(o.useDeprecatedSynchronousErrorHandling)throw n;s(n)},complete:function(){}},a=function(){return Array.isArray||function(n){return n&&"number"==typeof n.length}}();function u(n){return null!==n&&"object"==typeof n}var l=function(){function n(n){return Error.call(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,e){return e+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n,this}return n.prototype=Object.create(Error.prototype),n}(),h=function(){function n(n){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,n&&(this._ctorUnsubscribe=!0,this._unsubscribe=n)}return n.prototype.unsubscribe=function(){var e;if(!this.closed){var t=this,i=t._parentOrParents,o=t._ctorUnsubscribe,s=t._unsubscribe,c=t._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof n)i.remove(this);else if(null!==i)for(var h=0;h<i.length;++h)i[h].remove(this);if(r(s)){o&&(this._unsubscribe=void 0);try{s.call(this)}catch(n){e=n instanceof l?d(n.errors):[n]}}if(a(c)){h=-1;for(var p=c.length;++h<p;){var f=c[h];if(u(f))try{f.unsubscribe()}catch(n){e=e||[],n instanceof l?e=e.concat(d(n.errors)):e.push(n)}}}if(e)throw new l(e)}},n.prototype.add=function(e){var t=e;if(!e)return n.EMPTY;switch(typeof e){case"function":t=new n(e);case"object":if(t===this||t.closed||"function"!=typeof t.unsubscribe)return t;if(this.closed)return t.unsubscribe(),t;if(!(t instanceof n)){var r=t;(t=new n)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=t._parentOrParents;if(null===i)t._parentOrParents=this;else if(i instanceof n){if(i===this)return t;t._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return t;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[t]:o.push(t),t},n.prototype.remove=function(n){var e=this._subscriptions;if(e){var t=e.indexOf(n);-1!==t&&e.splice(t,1)}},n.EMPTY=function(n){return n.closed=!0,n}(new n),n}();function d(n){return n.reduce((function(n,e){return n.concat(e instanceof l?e.errors:e)}),[])}var p=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),f=function(n){function t(e,r,i){var o=n.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!e){o.destination=c;break}if("object"==typeof e){e instanceof t?(o.syncErrorThrowable=e.syncErrorThrowable,o.destination=e,e.add(o)):(o.syncErrorThrowable=!0,o.destination=new A(o,e));break}default:o.syncErrorThrowable=!0,o.destination=new A(o,e,r,i)}return o}return e(t,n),t.prototype[p]=function(){return this},t.create=function(n,e,r){var i=new t(n,e,r);return i.syncErrorThrowable=!1,i},t.prototype.next=function(n){this.isStopped||this._next(n)},t.prototype.error=function(n){this.isStopped||(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this))},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){this.destination.error(n),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var n=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=n,this},t}(h),A=function(n){function t(e,t,i,o){var s,a=n.call(this)||this;a._parentSubscriber=e;var u=a;return r(t)?s=t:t&&(s=t.next,i=t.error,o=t.complete,t!==c&&(r((u=Object.create(t)).unsubscribe)&&a.add(u.unsubscribe.bind(u)),u.unsubscribe=a.unsubscribe.bind(a))),a._context=u,a._next=s,a._error=i,a._complete=o,a}return e(t,n),t.prototype.next=function(n){if(!this.isStopped&&this._next){var e=this._parentSubscriber;o.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,n)&&this.unsubscribe():this.__tryOrUnsub(this._next,n)}},t.prototype.error=function(n){if(!this.isStopped){var e=this._parentSubscriber,t=o.useDeprecatedSynchronousErrorHandling;if(this._error)t&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,n),this.unsubscribe()):(this.__tryOrUnsub(this._error,n),this.unsubscribe());else if(e.syncErrorThrowable)t?(e.syncErrorValue=n,e.syncErrorThrown=!0):s(n),this.unsubscribe();else{if(this.unsubscribe(),t)throw n;s(n)}}},t.prototype.complete=function(){var n=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var t=function(){return n._complete.call(n._context)};o.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,t),this.unsubscribe()):(this.__tryOrUnsub(t),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(n,e){try{n.call(this._context,e)}catch(n){if(this.unsubscribe(),o.useDeprecatedSynchronousErrorHandling)throw n;s(n)}},t.prototype.__tryOrSetError=function(n,e,t){if(!o.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,t)}catch(e){return o.useDeprecatedSynchronousErrorHandling?(n.syncErrorValue=e,n.syncErrorThrown=!0,!0):(s(e),!0)}return!1},t.prototype._unsubscribe=function(){var n=this._parentSubscriber;this._context=null,this._parentSubscriber=null,n.unsubscribe()},t}(f),b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function E(n){return n}function m(n){return 0===n.length?E:1===n.length?n[0]:function(e){return n.reduce((function(n,e){return e(n)}),e)}}var y=function(){function n(n){this._isScalar=!1,n&&(this._subscribe=n)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(n,e,t){var r=this.operator,i=function(n,e,t){if(n){if(n instanceof f)return n;if(n[p])return n[p]()}return n||e||t?new f(n,e,t):new f(c)}(n,e,t);if(r?i.add(r.call(i,this.source)):i.add(this.source||o.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),o.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(e){o.useDeprecatedSynchronousErrorHandling&&(n.syncErrorThrown=!0,n.syncErrorValue=e),function(n){for(;n;){var e=n,t=e.closed,r=e.destination,i=e.isStopped;if(t||i)return!1;n=r&&r instanceof f?r:null}return!0}(n)?n.error(e):console.warn(e)}},n.prototype.forEach=function(n,e){var t=this;return new(e=v(e))((function(e,r){var i;i=t.subscribe((function(e){try{n(e)}catch(n){r(n),i&&i.unsubscribe()}}),r,e)}))},n.prototype._subscribe=function(n){var e=this.source;return e&&e.subscribe(n)},n.prototype[b]=function(){return this},n.prototype.pipe=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return 0===n.length?this:m(n)(this)},n.prototype.toPromise=function(n){var e=this;return new(n=v(n))((function(n,t){var r;e.subscribe((function(n){return r=n}),(function(n){return t(n)}),(function(){return n(r)}))}))},n.create=function(e){return new n(e)},n}();function v(n){if(n||(n=o.Promise||Promise),!n)throw new Error("no Promise impl found");return n}function g(n,e){return function(t){if("function"!=typeof n)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return t.lift(new C(n,e))}}var C=function(){function n(n,e){this.project=n,this.thisArg=e}return n.prototype.call=function(n,e){return e.subscribe(new w(n,this.project,this.thisArg))},n}(),w=function(n){function t(e,t,r){var i=n.call(this,e)||this;return i.project=t,i.count=0,i.thisArg=r||i,i}return e(t,n),t.prototype._next=function(n){var e;try{e=this.project.call(this.thisArg,n,this.count++)}catch(n){return void this.destination.error(n)}this.destination.next(e)},t}(f);function x(n,e,t,i){return r(t)&&(i=t,t=void 0),i?x(n,e,t).pipe(g((function(n){return a(n)?i.apply(void 0,n):i(n)}))):new y((function(r){B(n,e,(function(n){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(n)}),r,t)}))}function B(n,e,t,r,i){var o;if(function(n){return n&&"function"==typeof n.addEventListener&&"function"==typeof n.removeEventListener}(n)){var s=n;n.addEventListener(e,t,i),o=function(){return s.removeEventListener(e,t,i)}}else if(function(n){return n&&"function"==typeof n.on&&"function"==typeof n.off}(n)){var c=n;n.on(e,t),o=function(){return c.off(e,t)}}else if(function(n){return n&&"function"==typeof n.addListener&&"function"==typeof n.removeListener}(n)){var a=n;n.addListener(e,t),o=function(){return a.removeListener(e,t)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var u=0,l=n.length;u<l;u++)B(n[u],e,t,r,i)}r.add(o)}function _(n){return n&&"function"==typeof n.schedule}var S=function(n){return function(e){for(var t=0,r=n.length;t<r&&!e.closed;t++)e.next(n[t]);e.complete()}};function k(n,e){return new y((function(t){var r=new h,i=0;return r.add(e.schedule((function(){i!==n.length?(t.next(n[i++]),t.closed||r.add(this.schedule())):t.complete()}))),r}))}function z(n,e){return e?k(n,e):new y(S(n))}function M(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=n[n.length-1];return _(t)?(n.pop(),k(n,t)):z(n)}function I(){}function F(n,e,t){return function(r){return r.lift(new O(n,e,t))}}var O=function(){function n(n,e,t){this.nextOrObserver=n,this.error=e,this.complete=t}return n.prototype.call=function(n,e){return e.subscribe(new T(n,this.nextOrObserver,this.error,this.complete))},n}(),T=function(n){function t(e,t,i,o){var s=n.call(this,e)||this;return s._tapNext=I,s._tapError=I,s._tapComplete=I,s._tapError=i||I,s._tapComplete=o||I,r(t)?(s._context=s,s._tapNext=t):t&&(s._context=t,s._tapNext=t.next||I,s._tapError=t.error||I,s._tapComplete=t.complete||I),s}return e(t,n),t.prototype._next=function(n){try{this._tapNext.call(this._context,n)}catch(n){return void this.destination.error(n)}this.destination.next(n)},t.prototype._error=function(n){try{this._tapError.call(this._context,n)}catch(n){return void this.destination.error(n)}this.destination.error(n)},t.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(n){return void this.destination.error(n)}return this.destination.complete()},t}(f);function j(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var P=j(),N=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function R(n){return!!n&&"function"!=typeof n.subscribe&&"function"==typeof n.then}var D=function(n){if(n&&"function"==typeof n[b])return r=n,function(n){var e=r[b]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(n)};if(N(n))return S(n);if(R(n))return t=n,function(n){return t.then((function(e){n.closed||(n.next(e),n.complete())}),(function(e){return n.error(e)})).then(null,s),n};if(n&&"function"==typeof n[P])return e=n,function(n){for(var t=e[P]();;){var r=void 0;try{r=t.next()}catch(e){return n.error(e),n}if(r.done){n.complete();break}if(n.next(r.value),n.closed)break}return"function"==typeof t.return&&n.add((function(){t.return&&t.return()})),n};var e,t,r,i=u(n)?"an invalid object":"'"+n+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function L(n,e){return e?function(n,e){if(null!=n){if(function(n){return n&&"function"==typeof n[b]}(n))return function(n,e){return new y((function(t){var r=new h;return r.add(e.schedule((function(){var i=n[b]();r.add(i.subscribe({next:function(n){r.add(e.schedule((function(){return t.next(n)})))},error:function(n){r.add(e.schedule((function(){return t.error(n)})))},complete:function(){r.add(e.schedule((function(){return t.complete()})))}}))}))),r}))}(n,e);if(R(n))return function(n,e){return new y((function(t){var r=new h;return r.add(e.schedule((function(){return n.then((function(n){r.add(e.schedule((function(){t.next(n),r.add(e.schedule((function(){return t.complete()})))})))}),(function(n){r.add(e.schedule((function(){return t.error(n)})))}))}))),r}))}(n,e);if(N(n))return k(n,e);if(function(n){return n&&"function"==typeof n[P]}(n)||"string"==typeof n)return function(n,e){if(!n)throw new Error("Iterable cannot be null");return new y((function(t){var r,i=new h;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=n[P](),i.add(e.schedule((function(){if(!t.closed){var n,e;try{var i=r.next();n=i.value,e=i.done}catch(n){return void t.error(n)}e?t.complete():(t.next(n),this.schedule())}})))}))),i}))}(n,e)}throw new TypeError((null!==n&&typeof n||n)+" is not observable")}(n,e):n instanceof y?n:new y(D(n))}var G=function(n){function t(e){var t=n.call(this)||this;return t.parent=e,t}return e(t,n),t.prototype._next=function(n){this.parent.notifyNext(n)},t.prototype._error=function(n){this.parent.notifyError(n),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},t}(f),$=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return e(t,n),t.prototype.notifyNext=function(n){this.destination.next(n)},t.prototype.notifyError=function(n){this.destination.error(n)},t.prototype.notifyComplete=function(){this.destination.complete()},t}(f);function q(n,e){if(!e.closed){if(n instanceof y)return n.subscribe(e);var t;try{t=D(n)(e)}catch(n){e.error(n)}return t}}var U=function(){function n(n){this.project=n}return n.prototype.call=function(n,e){return e.subscribe(new H(n,this.project))},n}(),H=function(n){function t(e,t){var r=n.call(this,e)||this;return r.project=t,r.index=0,r}return e(t,n),t.prototype._next=function(n){var e,t=this.index++;try{e=this.project(n,t)}catch(n){return void this.destination.error(n)}this._innerSub(e)},t.prototype._innerSub=function(n){var e=this.innerSubscription;e&&e.unsubscribe();var t=new G(this),r=this.destination;r.add(t),this.innerSubscription=q(n,t),this.innerSubscription!==t&&r.add(this.innerSubscription)},t.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||n.prototype._complete.call(this),this.unsubscribe()},t.prototype._unsubscribe=function(){this.innerSubscription=void 0},t.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&n.prototype._complete.call(this)},t.prototype.notifyNext=function(n){this.destination.next(n)},t}($);var V,Y=function(){function n(n,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=n,this.concurrent=e}return n.prototype.call=function(n,e){return e.subscribe(new Z(n,this.project,this.concurrent))},n}(),Z=function(n){function t(e,t,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=n.call(this,e)||this;return i.project=t,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return e(t,n),t.prototype._next=function(n){this.active<this.concurrent?this._tryNext(n):this.buffer.push(n)},t.prototype._tryNext=function(n){var e,t=this.index++;try{e=this.project(n,t)}catch(n){return void this.destination.error(n)}this.active++,this._innerSub(e)},t.prototype._innerSub=function(n){var e=new G(this),t=this.destination;t.add(e);var r=q(n,e);r!==e&&t.add(r)},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(n){this.destination.next(n)},t.prototype.notifyComplete=function(){var n=this.buffer;this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}($),W=function(n){function t(e,t){var r=n.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,e){if(void 0===e&&(e=0),this.closed)return this;this.state=n;var t=this.id,r=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(r,t,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},t.prototype.requestAsyncId=function(n,e,t){return void 0===t&&(t=0),setInterval(n.flush.bind(n,this),t)},t.prototype.recycleAsyncId=function(n,e,t){if(void 0===t&&(t=0),null!==t&&this.delay===t&&!1===this.pending)return e;clearInterval(e)},t.prototype.execute=function(n,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(n,e);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,e){var t=!1,r=void 0;try{this.work(n)}catch(n){t=!0,r=!!n&&n||new Error(n)}if(t)return this.unsubscribe(),r},t.prototype._unsubscribe=function(){var n=this.id,e=this.scheduler,t=e.actions,r=t.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&t.splice(r,1),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null},t}(function(n){function t(e,t){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,e){return void 0===e&&(e=0),this},t}(h)),Q=function(){function n(e,t){void 0===t&&(t=n.now),this.SchedulerAction=e,this.now=t}return n.prototype.schedule=function(n,e,t){return void 0===e&&(e=0),new this.SchedulerAction(this,n).schedule(t,e)},n.now=function(){return Date.now()},n}(),J=new(function(n){function t(e,r){void 0===r&&(r=Q.now);var i=n.call(this,e,(function(){return t.delegate&&t.delegate!==i?t.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return e(t,n),t.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),t.delegate&&t.delegate!==this?t.delegate.schedule(e,r,i):n.prototype.schedule.call(this,e,r,i)},t.prototype.flush=function(n){var e=this.actions;if(this.active)e.push(n);else{var t;this.active=!0;do{if(t=n.execute(n.state,n.delay))break}while(n=e.shift());if(this.active=!1,t){for(;n=e.shift();)n.unsubscribe();throw t}}},t}(Q))(W),K=new y((function(n){return n.complete()}));V||(V={});var X=function(){function n(n,e,t){this.kind=n,this.value=e,this.error=t,this.hasValue="N"===n}return n.prototype.observe=function(n){switch(this.kind){case"N":return n.next&&n.next(this.value);case"E":return n.error&&n.error(this.error);case"C":return n.complete&&n.complete()}},n.prototype.do=function(n,e,t){switch(this.kind){case"N":return n&&n(this.value);case"E":return e&&e(this.error);case"C":return t&&t()}},n.prototype.accept=function(n,e,t){return n&&"function"==typeof n.next?this.observe(n):this.do(n,e,t)},n.prototype.toObservable=function(){var n;switch(this.kind){case"N":return M(this.value);case"E":return n=this.error,new y((function(e){return e.error(n)}));case"C":return function(n){return n?function(n){return new y((function(e){return n.schedule((function(){return e.complete()}))}))}(n):K}()}throw new Error("unexpected notification kind value")},n.createNext=function(e){return void 0!==e?new n("N",e):n.undefinedValueNotification},n.createError=function(e){return new n("E",void 0,e)},n.createComplete=function(){return n.completeNotification},n.completeNotification=new n("C"),n.undefinedValueNotification=new n("N",void 0),n}();var nn=function(){function n(n,e){this.delay=n,this.scheduler=e}return n.prototype.call=function(n,e){return e.subscribe(new en(n,this.delay,this.scheduler))},n}(),en=function(n){function t(e,t,r){var i=n.call(this,e)||this;return i.delay=t,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return e(t,n),t.dispatch=function(n){for(var e=n.source,t=e.queue,r=n.scheduler,i=n.destination;t.length>0&&t[0].time-r.now()<=0;)t.shift().notification.observe(i);if(t.length>0){var o=Math.max(0,t[0].time-r.now());this.schedule(n,o)}else this.unsubscribe(),e.active=!1},t.prototype._schedule=function(n){this.active=!0,this.destination.add(n.schedule(t.dispatch,this.delay,{source:this,destination:this.destination,scheduler:n}))},t.prototype.scheduleNotification=function(n){if(!0!==this.errored){var e=this.scheduler,t=new tn(e.now()+this.delay,n);this.queue.push(t),!1===this.active&&this._schedule(e)}},t.prototype._next=function(n){this.scheduleNotification(X.createNext(n))},t.prototype._error=function(n){this.errored=!0,this.queue=[],this.destination.error(n),this.unsubscribe()},t.prototype._complete=function(){this.scheduleNotification(X.createComplete()),this.unsubscribe()},t}(f),tn=function(){return function(n,e){this.time=n,this.notification=e}}(),rn=function(){function n(n){this.callback=n}return n.prototype.call=function(n,e){return e.subscribe(new on(n,this.callback))},n}(),on=function(n){function t(e,t){var r=n.call(this,e)||this;return r.add(new h(t)),r}return e(t,n),t}(f),sn=function(){function n(){this.container=document.querySelector(".palindrome-search-output-found-palindromes-container")}return n.prototype.clear=function(){this.container.innerHTML=""},n.prototype.add=function(n){var e=function(n){var e=document.querySelector("#new-palindrome-template").content.cloneNode(!0);return e.querySelector("li").innerHTML=n,e}(this.container.childElementCount+1+". "+n);this.container.appendChild(e)},n}();function cn(n,e){function t(){return!t.pred.apply(t.thisArg,arguments)}return t.pred=n,t.thisArg=e,t}function an(n,e){return function(t){return t.lift(new un(n,e))}}var un=function(){function n(n,e){this.predicate=n,this.thisArg=e}return n.prototype.call=function(n,e){return e.subscribe(new ln(n,this.predicate,this.thisArg))},n}(),ln=function(n){function t(e,t,r){var i=n.call(this,e)||this;return i.predicate=t,i.thisArg=r,i.count=0,i}return e(t,n),t.prototype._next=function(n){var e;try{e=this.predicate.call(this.thisArg,n,this.count++)}catch(n){return void this.destination.error(n)}e&&this.destination.next(n)},t}(f),hn=function(){function n(){this.container=document.querySelector(".palindrome-search-output-characters")}return n.prototype.clear=function(){this.container.innerHTML=""},n.prototype.add=function(n){var e,t,r=this;(e=n,t=document.querySelector("#new-character-template").content,e.split("").map((function(n){var e=t.cloneNode(!0);return e.querySelector("li").innerHTML=n,e}))).forEach((function(n){return r.container.appendChild(n)}))},n.prototype.highlightFound=function(n,e){this.highlight(n,e,"found")},n.prototype.highlightInspected=function(n,e){this.highlight(n,e,"inspected")},n.prototype.highlight=function(n,e,t){this.lowlightAll();var r,i,o,s=(r=L(Array.from(this.container.children).map((function(n,e){return{id:e,character:n}}))),[an(i=function(t){return t.id>=n&&t.id<=e},o)(new y(D(r))),an(cn(i,o))(new y(D(r)))]),c=s[1];s[0].subscribe((function(n){return n.character.classList.add(t)})),c.subscribe((function(n){return n.character.classList.remove(t)}))},n.prototype.lowlightAll=function(){Array.from(this.container.children).forEach((function(n){return n.classList.remove("found","inspected")}))},n}(),dn=t(379),pn=t.n(dn),fn=t(169);pn()(fn.Z,{insert:"head",singleton:!1}),fn.Z.locals;var An=function(n){this.amount=n},bn=function(n,e,t){this.from=n,this.to=e,this.value=t},En=function(n,e){this.from=n,this.to=e},mn=function(){},yn=function(){function n(n,e){this.sentence=n,this.eventStream=e}return n.prototype.findPalindromes=function(){for(var n=this.sentence.split(""),e=0,t=0;t<n.length;t++){e++,this.sendPalindromeInspectedEvent(t,t),this.sendOddLengthPalindromeFoundEvent(t,0);for(var r=1;this.canExpandFromOddLengthPalindrome(t,r)&&n[t-r]==n[t+r];)this.sendPalindromeInspectedEvent(t-r,t+r),this.sendOddLengthPalindromeFoundEvent(t,r),e++,r++;if(r=1,this.sendPalindromeInspectedEvent(t,t+1),t+1<this.sentence.length&&n[t]==n[t+1])for(e++,this.sendEvenLengthPalindromeFound(t,0);this.canExpandFromEvenLengthPalindrome(t,t+1,r)&&(this.sendPalindromeInspectedEvent(t-r,t+1+r),n[t-r]==n[t+1+r]);)e++,this.sendEvenLengthPalindromeFound(t,r),r++}this.eventStream.next(new An(e)),this.eventStream.complete()},n.prototype.sendPalindromeInspectedEvent=function(n,e){this.eventStream.next(new En(n,e))},n.prototype.sendEvenLengthPalindromeFound=function(n,e){this.eventStream.next(new bn(n-e,n+1+e,this.sentence.substring(n-e,n+2+e)))},n.prototype.sendOddLengthPalindromeFoundEvent=function(n,e){this.eventStream.next(new bn(n-e,n+e,this.sentence.substring(n-e,n+1+e)))},n.prototype.canExpandFromEvenLengthPalindrome=function(n,e,t){return void 0===n&&(n=0),void 0===e&&(e=0),void 0===t&&(t=1),n-t>=0&&e+t<this.sentence.length},n.prototype.canExpandFromOddLengthPalindrome=function(n,e){return void 0===n&&(n=0),void 0===e&&(e=1),n-e>=0&&n+e<this.sentence.length},n}(),vn=function(){function n(n){this.sentence=n}return n.prototype.search=function(){var n=this;return 0===this.sentence.length?M(new mn):new y((function(e){new yn(n.sentence,e).findPalindromes()}))},n}(),gn=document.querySelector("#palindrome-search-input-speed-view");var Cn=new sn,wn=new hn,xn=100;x(document.querySelector("#palindrome-search-input-speed"),"input").pipe(g((function(n){return n.target.value})),F((function(n){return gn.innerText=n})),g((function(n){return Number(n)}))).subscribe((function(n){return xn=n}));var Bn=document.querySelector("#palindrome-search-input");Bn.addEventListener("input",(function(n){var e=n.target.value;wn.clear(),wn.add(e)}));var _n,Sn,kn=document.querySelector(".palindrome-search-input__start-button");function zn(){wn.lowlightAll(),Bn.disabled=!1,kn.disabled=!1}x(kn,"click").pipe(F((function(){return Bn.disabled=!0,kn.disabled=!0,void Cn.clear()})),function n(e,t){return"function"==typeof t?function(r){return r.pipe(n((function(n,r){return L(e(n,r)).pipe(g((function(e,i){return t(n,e,r,i)})))})))}:function(n){return n.lift(new U(e))}}((function(){return new vn(Bn.value).search()})),(Sn=function(n){return M(n).pipe(function(n,e){void 0===e&&(e=J);var t,r=(t=n)instanceof Date&&!isNaN(+t)?+n-e.now():Math.abs(n);return function(n){return n.lift(new nn(r,e))}}(xn))},function n(e,t,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof t?function(i){return i.pipe(n((function(n,r){return L(e(n,r)).pipe(g((function(e,i){return t(n,e,r,i)})))}),r))}:("number"==typeof t&&(r=t),function(n){return n.lift(new Y(e,r))})}(Sn,undefined,1)),F((function(n){if(n instanceof bn){var e=n;Cn.add(e.value),wn.highlightFound(e.from,e.to)}else if(n instanceof En){var t=n;wn.highlightInspected(t.from,t.to)}else n instanceof An&&(console.log("All found"),zn())})),(_n=function(){console.log("finalized"),zn()},function(n){return n.lift(new rn(_n))})).subscribe()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,